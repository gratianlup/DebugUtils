// ***************************************************************
//  Debug Library   version:  1.0
//  -------------------------------------------------------------
//
//  Copyright (C) 2007 Lup Gratian - All Rights Reserved
//                      
// ***************************************************************

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Reflection;
using System.Threading;
using System.ServiceModel;
using System.Runtime.Serialization;
using DebugUtils.Debugger.Listeners.WCF;

namespace DebugUtils.Debugger.Listeners
{
	internal class DebugServiceEvents : IDebugServiceCallback
	{
		public AppInfo RequestApplicationInfo()
		{
			AppInfo info = new AppInfo();
			System.Diagnostics.Process p = System.Diagnostics.Process.GetCurrentProcess();

			try
			{
				info.MachineName = p.MachineName;
				info.MainWindowTitle = p.MainWindowTitle;
				info.PrivateMemorySize = p.PrivateMemorySize64;
				info.StartTime = p.StartTime;
				info.ThreadNumber = p.Threads.Count;
				info.TotalProcessorTime = p.TotalProcessorTime;
				info.UserName = Environment.UserName;
				info.UserProcessorTime = p.UserProcessorTime;
				info.VirtualMemorySize = p.VirtualMemorySize64;
				info.WorkingSet = p.WorkingSet64;
				info.OSVersion = Environment.OSVersion;
				info.ProcessorCount = Environment.ProcessorCount;
			}
			catch (Exception e)
			{
				Console.WriteLine("Failed to get process information. Exception: {0}", e.Message);
			}

			return info;
		}


		public void ExitApplication()
		{
			Environment.Exit(0);
		}
	}


	/// <summary>
	/// Listener that sends massages to a service using WCF.
	/// </summary>
	public class WCFListener : DebugListenerBase
	{
		#region Fields

		private DebugServiceClient client;
		private string clientName;

		#endregion

		#region Properties

		private string _adress;
		public string Adress
		{
			get { return _adress; }
			set { _adress = value; }
		}


		private bool _enabled;
		public override bool Enabled
		{
			get { return _enabled; }
			set { _enabled = value; }
		}

		#endregion

		#region Constructor

		public WCFListener()
		{
			_enabled = true;
		}

		public WCFListener(int listenerId, string adress) : this()
		{
			ListnerId = listenerId;
			_adress = adress;
		}

		#endregion

		#region Private methods

		private void HandleResponse(ClientResponse response)
		{
			switch (response)
			{
				case ClientResponse.Break:
					{
						System.Diagnostics.Debugger.Break();
						break;
					}
				case ClientResponse.Exit:
					{
						Environment.Exit(0);
						break;
					}
			}
		}

		#endregion

		#region Public methods

		public override bool Open()
		{
			if (IsOpen == false)
			{
				try
				{
					InstanceContext context = new InstanceContext(new DebugServiceEvents());
					client = new DebugServiceClient(context, new NetTcpBinding(), new EndpointAddress(_adress));

					// set the client name as the name of the assembly
					clientName = Assembly.GetExecutingAssembly().FullName;

					client.Open(clientName, System.Diagnostics.Process.GetCurrentProcess().MachineName,
										   System.Diagnostics.Process.GetCurrentProcess().ProcessName);

					// register for all events
					client.Subscribe(clientName, EventType.All);

					IsOpen = true;
				}
				catch (CommunicationException ce)
				{
					Console.WriteLine("Failed to connect to WCF service. Exception: {0}", ce.Message);
					return false;
				}
				catch (Exception e)
				{
					Console.WriteLine("Unknown error while connecting to WCF service. Exception: {0}", e.Message);
					return false;
				}
			}

			return true;
		}


		public override bool Close()
		{
			if (IsOpen)
			{
				try
				{
					client.Unsubscribe(clientName, EventType.All);
					client.Close(clientName);
				}
				catch (CommunicationException ce)
				{
					Console.WriteLine("Failed to close WCF service. Exception: {0}", ce.Message);
					return false;
				}
				catch (Exception e)
				{
					Console.WriteLine("Unknown error while closing WCF service. Exception: {0}", e.Message);
					return false;
				}
			}

			return true;
		}


		public override bool DumpMessage(DebugMessage message)
		{
			if (IsOpen == false || _enabled == false)
			{
				return false;
			}

			try
			{
				HandleResponse(client.HandleDebugMessage(clientName, message));
			}
			catch (CommunicationException ce)
			{
				Console.WriteLine("Failed to call method on WCF service. Exception: {0}", ce.Message);
				return false;
			}

			return true;
		}

		#endregion		
	}
}