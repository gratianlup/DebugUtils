<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LGratian.Debugger</name>
    </assembly>
    <members>
        <member name="T:LGratian.Debugger.DebugMessageType">
            <summary>
            The possible types that a message can be.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.StackSegment">
            <summary>
            Stores information about an method on the stack.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.DebugMessage">
            <summary>
            The primary structure used to store message information.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.IDebugListener">
            <summary>
            Interface that needs to be used by all listeners.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.IDebugMessageFilter">
            <summary>
            Interface that needs to be used by all message filters.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.IDebugMessageNotifier">
            <summary>
            Interface that needs to be used by all debug message notifiers.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Filters.ErrorMessageFilter">
            <summary>
            Filters messages of type error.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.DebugMessageFilterBase">
            <summary>
            It is recommended to derive all debug listeners from this abstract class.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Filters.WarningMessageFilter">
            <summary>
            Filters messages of type warning.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Filters.UnknownMessageFilter">
            <summary>
            Filters messages of unknown type.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Filters.NamespaceMessageFilter">
            <summary>
            Filters messages by namespace.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Filters.ObjectMessageFilter">
            <summary>
            Filters messages by object.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Filters.MethodMessageFilter">
            <summary>
            Filters messages by method.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.WinSAT">
            <summary>
            Provides functionality for querying WinSAT (Windows Experience Index) scores.
            </summary>
            <remarks>Available only in Windows Vista. The class isn't based on the WinSAT API, instead it uses the files from the WinSAT store.</remarks>
        </member>
        <member name="M:LGratian.Debugger.WinSAT.LoadWinSAT">
            <summary>
            Load the scores from the WinSAT (Windows Experience Index) store
            </summary>
        </member>
        <member name="T:LGratian.Debugger.IObjectCounterNotifier">
            <summary>
            Interface that needs to be used by all object counter notifiers.
            </summary>
        </member>
        <member name="F:LGratian.Debugger.ObjectCounter.ObjectCounterNotifier">
            <summary>
            The attached IObjectCounterNotifier derived object
            </summary>
        </member>
        <member name="F:LGratian.Debugger.ObjectCounter.OnObjectCountExceeded">
            <summary>
            Event raised when an object exceeds the maximum allowed count.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.AddObjectType(System.Type,System.String,System.Int32)">
            <summary>
            Add a object type.
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
            <param name="maxCount">The maximum count of objects of this type allowed.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.AddObjectType(System.Type,System.String)">
            <summary>
            Add a object type.
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.AddObjectType(System.Type,System.Int32)">
            <summary>
            Add a object type.
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="maxCount">The maximum count of objects of this type allowed.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.AddObjectType(System.Type)">
            <summary>
            Add a object type.
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.IncrementObjectCount(System.Object,System.String)">
            <summary>
            Increment the count of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.IncrementObjectCount(System.Object)">
            <summary>
            Increment the count of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.DecrementObjectCount(System.Object,System.String)">
            <summary>
            Decrement the count of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.DecrementObjectCount(System.Object)">
            <summary>
            Decrement the count of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GetObjectCount(System.Type,System.String)">
            <summary>
            Get the objcet count
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
            <returns>NULL if the specified type was not fount.</returns>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GetObjectCount(System.Type)">
            <summary>
            Get the objcet count
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <returns>NULL if the specified type was not fount.</returns>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.ResetObjectCount(System.Type,System.String)">
            <summary>
            Reset the object count
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.ResetObjectCount(System.Type)">
            <summary>
            Get the objcet count
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.SetObjectCounterState(System.Type,System.String,System.Boolean)">
            <summary>
            Set the state of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
            <param name="state">The state of the object.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.SetObjectCounterState(System.Type,System.Boolean)">
            <summary>
            Set the state of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="state">The state of the object.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GetObjectCounterState(System.Type,System.String)">
            <summary>
            Get the state of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
            <returns>NULL if the specified type was not fount.</returns>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GetObjectCounterState(System.Type)">
            <summary>
            Get the state of the object
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <returns>NULL if the specified type was not fount.</returns>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.SetObjectMaximumCount(System.Type,System.String,System.Int32)">
            <summary>
            Set the maximum allowed number of objects
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
            <param name="maxCount">The maximum count of objects of this type allowed.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.SetObjectMaximumCount(System.Type,System.Int32)">
            <summary>
            Set the maximum allowed number of objects
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="maxCount">The maximum count of objects of this type allowed.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GetObjectMaximumCount(System.Type,System.String)">
            <summary>
            Get the maximum allowed number of objects
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
            <param name="counterName">The name of the counter this type belongs.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GetObjectMaximumCount(System.Type)">
            <summary>
            Get the maximum allowed number of objects
            </summary>
            <param name="type">The object type. Use typeof() to get the type.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GenerateSummary">
            <summary>
            Generate a summary about all object counters.
            </summary>
            <returns>The summary string.</returns>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.SaveSummary(System.String)">
            <summary>
            Save a summary about all the object counter (text file)
            </summary>
            <param name="path">The location where to save the summary.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GenerateHtmlReport(System.String,System.String,System.Boolean)">
            <summary>
            Generate a report in HTML format about the stored object counters
            </summary>
            <param name="path">The location where to save the report.</param>
            <param name="title">The title of the report.</param>
            <param name="open">Specifies whether or not to open the report in the default browser.</param>
        </member>
        <member name="M:LGratian.Debugger.ObjectCounter.GenerateHtmlReport">
            <summary>
            Generate a report in HTML format about the stored object counters
            </summary>
            <remarks>The report will be saved in the temporary directory and opened automatically in the default browser.</remarks>
        </member>
        <member name="T:LGratian.Debugger.DebugOptions">
            <summary>
            Allows setting custom debug rules on objects and methods.
            </summary>
            <example>[DebugOptions(Debug = true, Assert = true)]</example>
        </member>
        <member name="M:LGratian.Debugger.StringTable.AddString(System.String,System.String)">
            <summary>
            Add a string to the string table
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="M:LGratian.Debugger.StringTable.GetString(System.String)">
            <summary>
            Retrieve the string value for the given key
            </summary>
            <param name="key">The key of the string.</param>
            <remarks>If the key was not found, the value will be retrieved from the associated ResourceManager.</remarks>
        </member>
        <member name="M:LGratian.Debugger.StringTable.RemoveString(System.String)">
            <summary>
            Remove a string from the string table
            </summary>
            <param name="key">The key of the string.</param>
        </member>
        <member name="M:LGratian.Debugger.StringTable.RemoveAllStrings">
            <summary>
            Remove all string from the string table
            </summary>
        </member>
        <member name="M:LGratian.Debugger.StringTable.SerializeTable(System.String)">
            <summary>
            Serialize the string table in XML format
            </summary>
            <param name="path">The location where to save the serialized string table.</param>
        </member>
        <member name="M:LGratian.Debugger.StringTable.DeserializeTable(System.String)">
            <summary>
            Deserialize the string table from XML format
            </summary>
            <param name="path">The location from where to load the string table.</param>
        </member>
        <member name="M:LGratian.Debugger.StringTable.LoadFromResource(System.String)">
            <summary>
            Loads all strings found in the resource
            </summary>
            <param name="path">The path of the resource from where to load the data.</param>
        </member>
        <member name="T:LGratian.Debugger.DebugListenerBase">
            <summary>
            It is recommended to derive all debug listeners from this abstract class.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.DebugMessageNotifierBase">
            <summary>
            It is recommended to derive all debug message notifiers from this abstract class.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.CrashNotifierBase">
            <summary>
            It is recommended to derive all crash notifiers from this abstract class.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.ICrashNotifier">
            <summary>
            Interface that needs to be used by all CrashNotifier objects.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.ObjectCounterNotifierBase">
            <summary>
            It is recommended to derive all object counter notifiers from this abstract class.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Listeners.ConsoleListener">
            <summary>
            Listener that writes the messages to the console.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Listeners.TextFileListener">
            <summary>
            Listener that writes the messages to a file.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.CustomDataEventArgs">
            <summary>
            Used to pass custom data to the exception manager when when writing the dump report.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.CustomDataRetrievalDelegate">
            <summary>
            Delegate used to handle the OnWriteDump event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LGratian.Debugger.ExceptionManager">
            <summary>
            Provides functionality for managing unhandled exceptions.
            </summary>
        </member>
        <member name="F:LGratian.Debugger.ExceptionManager.CrashNotifier">
            <summary>
            The crash notifier to be launched when an unhandled exception occurs.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.ExceptionManager.SerializeDebugMessages">
            <summary>
            Save the debug messages in XML format
            </summary>
        </member>
        <member name="M:LGratian.Debugger.ExceptionManager.AttachExceptionManager(System.AppDomain)">
            <summary>
            Attach the exception manager to the UnhandledException event of the given AppDomain.
            </summary>
            <param name="domain">The AppDomain to which to attach the exception manager.</param>
        </member>
        <member name="M:LGratian.Debugger.ExceptionManager.AttachExceptionManager">
            <summary>
            Attach the exception manager to the UnhandledException event of the default AppDomain.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.ExceptionManager.DetachExceptionManager">
            <summary>
            Detach the exception manager from the attached AppDomain.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.Dump">
            <summary>
            Indicates whether or not to create a crash dump report.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.DumpPath">
            <summary>
            Indicates where to save the crash dump report.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.DumpHeader">
            <summary>
            Indicates a description header of the crash dump report.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.ReportCrash">
            <summary>
            Indicates whether or not to report the application crash to the debugger.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.CrashReportMessage">
            <summary>
            The message to be sent to the debugger when reporting the application crash.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.SaveDebugMessages">
            <summary>
            Indicates whether or not to save the debug messages when the application crashes.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.DebugMessagesPath">
            <summary>
            The path where to save the debug messages.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.SaveMessagesCompressed">
            <summary>
            Indicates whether or not to save the debug messages in compressed format (ZIP).
            </summary>
        </member>
        <member name="P:LGratian.Debugger.ExceptionManager.AppendWinSATScores">
            <summary>
            Indicates whether or not to append the WinSAT (Windows Experience Index) scores to the dump report.
            </summary>
        </member>
        <member name="E:LGratian.Debugger.ExceptionManager.OnUnhandledException">
            <summary>
            Event raised when an unhandled exception occurs.
            </summary>
        </member>
        <member name="E:LGratian.Debugger.ExceptionManager.OnWriteDump">
            <summary>
            Event raised when the dump report is being written.
            It can be used to write custom data to the report.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.IPerformanceIterationNotifier">
            <summary>
            Interface that needs to be used by all iteration notifier objects.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.PerformanceIteration.HitsPerSecond">
            <summary>
            Return the number of hits per second.
            Returns NaN if HitCount equals 0.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.TimeEllapsedDelegate">
            <summary>
            Delegate used by performance iterations with a timer attached
            </summary>
            <param name="perfEvent">The event that generated the call.</param>
            <param name="iteration">The active iteration when the call was made.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.Start">
            <summary>
            Start an iteration
            </summary>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.Stop">
            <summary>
            Stop the currently running iteration
            </summary>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.Hit">
            <summary>
            Increase the hit count of the running iteration
            </summary>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.StartTimed(System.TimeSpan,LGratian.Debugger.TimeEllapsedDelegate)">
            <summary>
            Start an iteration with a timer attached
            </summary>
            <param name="duration">The duration to monitor the hit count.</param>
            <param name="onTimeEllapsed">The method to call when the specified time elapses.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.StartTimed(System.TimeSpan)">
            <summary>
            Start an iteration with a timer attached
            </summary>
            <param name="duration">The duration to monitor the hit count.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.StopTimer">
            <summary>
            Stop monitoring the active performance iteration
            </summary>
        </member>
        <member name="M:LGratian.Debugger.PerformanceEvent.Wait">
            <summary>
            Wait until the event is stopped
            </summary>
        </member>
        <member name="P:LGratian.Debugger.PerformanceEvent.AverageDuration">
            <summary>
            The average of all iteration durations
            Returns NULL if the average duration cannot be computed (0 iterations).
            </summary>
        </member>
        <member name="T:LGratian.Debugger.PerformanceManager">
            <summary>
            Provides functionality for monitoring the performance of the application.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.AddEvent(System.String,System.Boolean)">
            <summary>
            Add a new performance event
            </summary>
            <param name="name">The name of the performance event.</param>
            <param name="start">Specifies whether or not to start the event immediately.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.AddEvent(System.String)">
            <summary>
            Add a new performance event
            </summary>
            <param name="name">The name of the performance event.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.GetEvent(System.String)">
            <summary>
            Get the event by its name
            </summary>
            <param name="name">The name of the performance event.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.RemoveEvent(System.String)">
            <summary>
            Remove the event
            </summary>
            <param name="name">The name of the performance event.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.StartEvent(System.String)">
            <summary>
            Start the event.
            </summary>
            <param name="name">The name of the performance event.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.StartTimedEvent(System.String,System.TimeSpan,LGratian.Debugger.TimeEllapsedDelegate)">
            <summary>
            Start the event with a timer attached
            </summary>
            <param name="name">The name of the performance event.</param>
            <param name="duration">The time to monitor the hit count.</param>
            <param name="onTimeEllapsed">The method to call when the specified time elapses.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.StartTimedEvent(System.String,System.TimeSpan)">
            <summary>
            Start the event with a timer attached
            </summary>
            <param name="name">The name of the performance event.</param>
            <param name="duration">The time to monitor the hit count.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.StopEvent(System.String)">
            <summary>
            Stop the event.
            </summary>
            <param name="name">The name of the performance event.</param>
            <returns>
            TimeSpan.MaxValue if the event was not found.
            </returns>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.IncreaseHitCount(System.String)">
            <summary>
            Increase the hit count of the running iteration for the given performance event
            </summary>
            <param name="name">The name of the performance event.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.SerializeEvents(System.String)">
            <summary>
            Serialize all events
            </summary>
            <param name="path">The path where to save the serialized events.</param>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.LaunchPerformanceViewer">
            <summary>
            Launch the attached performance viewer
            </summary>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.GenerateHtmlSummary(System.String,System.String,System.Boolean)">
            <summary>
            Generate a report in HTML format about the stored object counters
            </summary>
            <param name="path">The location where to save the report.</param>
            <param name="title">The title of the report.</param>
            <param name="open">Specifies whether or not to open the report in the default browser.</param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.PerformanceManager.GenerateHtmlSummary">
            <summary>
            Generate a report in HTML format about the stored object counters
            </summary>
            <remarks>The report will be saved in the temporary directory and opened automatically in the default browser.</remarks>
        </member>
        <member name="T:LGratian.Debugger.Debug">
            <summary>
            The primary class that handless debugging.
            Most of the other classes are exposed as static members withing this class.
            All methods and fields are defined as "static".
            Provides support for serialization of the stored messages in XML and ZIP compressed XML format and generating of HTML reports.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.InitDebugMessage(LGratian.Debugger.DebugMessageType,System.String)">
            <summary>
            Allocates and initializes a message with its type and message.
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.InitDebugMessage(LGratian.Debugger.DebugMessageType)">
            <summary>
            Allocates and initializes a message with its type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.InitDebugMessage">
            <summary>
            Allocates a message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.AssureMessageListIsAllocated">
            <summary>
            Allocates the message store list if it's not allocated yet
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.AddMessageToStore(LGratian.Debugger.DebugMessage)">
            <summary>
            Tries to add the given message to the list.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.ExcludeMessage(LGratian.Debugger.DebugMessage)">
            <summary>
            Filters the message
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.SendMessageToListeners(LGratian.Debugger.DebugMessage)">
            <summary>
            Tries to send the given message to all attached listeners.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.SendMessageToNotifier(LGratian.Debugger.DebugMessage)">
            <summary>
            Shows the debug message using the attached debug message notifier.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.AddStackInfoToMessage(LGratian.Debugger.DebugMessage)">
            <summary>
            Tries to add to the message all the stack information available at the given moment.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.AddMethodType(System.Diagnostics.StackFrame,LGratian.Debugger.StackSegment)">
            <summary>
            Add the method type to the specified StackSegment
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.AddBaseMethodInfoToMessage(LGratian.Debugger.DebugMessage)">
            <summary>
            Tries to add the stack information for the method that generated the given message.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetTopMethod">
            <summary>
            Get the method that called the debugger.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetSettings">
            <summary>
            Get the debugger settings. Custom settings can be specified on a object/method basis using the DebugOptions attribute.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetFormatString(System.String)">
            <summary>
            Get the format string.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.ClearMessageStore">
            <summary>
            Remove all messages from the store
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.AddListner(LGratian.Debugger.IDebugListener)">
            <summary>
            Attach a listener to the debugger.
            </summary>
            <param name="listener">The listener to be added</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.RemoveListner(System.Int32)">
            <summary>
            Detach a listener from the debugger.
            </summary>
            <param name="id">The Id of the listener.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.RemoveAllListeners">
            <summary>
            Detach all listeners attached to the debugger
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetListnerById(System.Int32)">
            <summary>
            Returns a listener by knowing it's Id.
            </summary>
            <param name="id">The Id of the listener.</param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetListnerByIndex(System.Int32)">
            <summary>
            Returns an listener by knowing it's index.
            </summary>
            <param name="index">The index of the listener.</param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.AddFilter(LGratian.Debugger.IDebugMessageFilter)">
            <summary>
            Attach a filter to the debugger.
            </summary>
            <param name="filter">The filter to be attached.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.RemoveFilter(System.Int32)">
            <summary>
            Detach a filter from the debugger.
            </summary>
            <param name="filterId">The Id of the filter.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.RemoveAllFilters">
            <summary>
            Detach all filters from the debugger.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetFilterById(System.Int32)">
            <summary>
            Returns a filter by knowing it's Id.
            </summary>
            <param name="filterId">The Id of the filter.</param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.GetFilterByIndex(System.Int32)">
            <summary>
            Return a filter by knowing it's index.
            </summary>
            <param name="index">The Id of the index.</param>
            <returns></returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.Assert(System.Boolean)">
            <summary>
            Performs an assertion.
            </summary>
            <param name="value">The value to test.</param>
            <remarks>The assertion fails if the giben value is FALSE.</remarks>
        </member>
        <member name="M:LGratian.Debugger.Debug.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Performs an assertion.
            </summary>
            <param name="value">The value to test.</param>
            <param name="message">The string used to format the message.</param>
            <param name="parameters">The message parameters.</param>
            <remarks>The assertion fails if the giben value is FALSE.</remarks>
        </member>
        <member name="M:LGratian.Debugger.Debug.AssertType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Performs a type assertion.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="type">The type to check for.</param>
            <param name="format">The string used to format the message.</param>
            <param name="args">The message parameters.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.AssertType(System.Object,System.Type)">
            <summary>
            Performs a type assertion.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="type">The type to check for.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.AssertNotNull(System.Object)">
            <summary>
            Performs a null assertion.
            </summary>
            <param name="obj">The object to check.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.AssertNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Performs a null assertion.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="format">The string used to format the message.</param>
            <param name="args">The message parameters.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.ReportError(System.String,System.Object[])">
            <summary>
            Reports the given error to the debugger.
            </summary>
            <param name="format">The string used to format the message.</param>
            <param name="args">The message parameters.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.ReportWarning(System.String,System.Object[])">
            <summary>
            Reports the given warning to the debugger.
            </summary>
            <param name="format">The string used to format the message.</param>
            <param name="args">The message parameters.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.Report(System.String,System.Object[])">
            <summary>
            Reports the given message to the debugger.
            </summary>
            <param name="format">The string used to format the message.</param>
            <param name="args">The message parameters.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.SerializeMessages(System.String)">
            <summary>
            Serializes all stored messages in XML format.
            </summary>
            <param name="path">The path where to store the serialized message.</param>
            <returns>
            TRUE if the messages were successfully serialized.
            FALSE if the message couldn't be serialized.
            </returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.DeserializeMessages(System.String)">
            <summary>
            Deserializes all stored messages from XML format.
            </summary>
            <param name="path">The path from where to deserialize the message.</param>
            <returns>
            TRUE if the messages were successfully deserialized.
            FALSE if the message couldn't be deserialized.
            </returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.SerializeMessages(System.IO.MemoryStream)">
            <summary>
            Serializes all stored messages in XML format.
            </summary>
            <param name="path">The memory stream where to store the serialized message.</param>
            <returns>
            TRUE if the message was successfully serialized.
            FALSE if the message couldn't be serialized.
            </returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.SerializeMessagesCompressed(System.String)">
            <summary>
            Serializes all stored messages in XML and compresses them in ZIP format
            </summary>
            <param name="path">The path where to store the serialized messages.</param>
            <returns>
            TRUE if the message was successfully serialized.
            FALSE if the message couldn't be serialized.
            </returns>
        </member>
        <member name="M:LGratian.Debugger.Debug.ApplySettings(LGratian.Debugger.IDebugSettings)">
            <summary>
            Apply the settings from the IDebugSettings object
            </summary>
            <param name="settings">The settings to apply.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.ApplyDebuggerSettings(LGratian.Debugger.IDebugSettings)">
            <summary>
            Apply the debugger settings from the IDebugSettings object
            </summary>
            <param name="settings">The settings to apply.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.ApplyExceptionManagerSettings(LGratian.Debugger.IDebugSettings)">
            <summary>
            Apply the Exception Manager settings from the IDebugSettings object
            </summary>
            <param name="settings">The settings to apply.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.ApplyPerformanceManagerSettings(LGratian.Debugger.IDebugSettings)">
            <summary>
            Apply the PerformanceManager settings from the IDebugSettings object
            </summary>
            <param name="settings">The settings to apply.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.LaunchDebugMessageViewer(System.String)">
            <summary>
            Launch the attached debug message viewer
            </summary>
            <param name="path">The file to open.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.LaunchDebugMessageViewer">
            <summary>
            Launch the attached debug message viewer
            </summary>
            <remarks>A temporary XML file will be generated containing the serialized messages.</remarks>
        </member>
        <member name="M:LGratian.Debugger.Debug.GenerateHtmlReport(System.String,System.String,System.Boolean)">
            <summary>
            Generate a report in HTML format about the stored debug messages
            </summary>
            <param name="path">The location where to save the report.</param>
            <param name="title">The title of the report.</param>
            <param name="open">Specifies whether or not to open the report in the default browser.</param>
        </member>
        <member name="M:LGratian.Debugger.Debug.GenerateHtmlReport">
            <summary>
            Generate a report in HTML format about the stored debug messages
            </summary>
            <remarks>The report will be saved in the temporary directory and opened automatically in the default browser.</remarks>
        </member>
        <member name="F:LGratian.Debugger.Debug.ExceptionManager">
            <summary>
            Provides support for unhandled exceptions and writing dump reports.
            </summary>
        </member>
        <member name="F:LGratian.Debugger.Debug.PerformanceManager">
            <summary>
            Provides support for monitoring the execution time.
            </summary>
        </member>
        <member name="F:LGratian.Debugger.Debug.ObjectCounter">
            <summary>
            Provides support for monitoring the count of created objects.
            </summary>
        </member>
        <member name="F:LGratian.Debugger.Debug.WinSAT">
            <summary>
            Provides support for retrieving the WinSAT (Windows Experience Index) scores unde Windows Vista.
            </summary>
        </member>
        <member name="M:LGratian.Debugger.Debug.IsCriticalException(System.Exception)">
            <summary>
            Verifies if an exception is a critical one
            </summary>
            <param name="ex">The exception to verify.</param>
        </member>
        <member name="P:LGratian.Debugger.Debug.ListenerCount">
            <summary>
            Returns the number of attached listeners.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.FilterCount">
            <summary>
            Returns the number of attached filters.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.StoreMessages">
            <summary>
            Indicates whether or not the messages should be stored.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.MessageStoreCapacity">
            <summary>
            The the capacity of the message store. If the maximum capacity is exceeded, messages from the beginning are removed.
            If no capacity is set, the debugger uses the default capacity (1024).
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.BreakOnFailedAssertion">
            <summary>
            Indicates whether or not the application should thrown an exception when an assertion fails.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.LogToDebugger">
            <summary>
            Indicates whether or not to log the message to the debugger.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.SaveStackInfo">
            <summary>
            Indicates whether or not stack information should be stored for each message.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.Enabled">
            <summary>
            Indicates whether or not the debugger is enabled or not.
            </summary>
        </member>
        <member name="P:LGratian.Debugger.Debug.DebugMessages">
            <summary>
            Provides access to the list of debug messages.
            </summary>
        </member>
        <member name="T:LGratian.Debugger.Debug.DebugSettings">
            <summary>
            Used for retrieving the setting that apply in the given context.
            Custom settings can be specified on a object/method basis using the DebugOptions attribute.
            </summary>
        </member>
    </members>
</doc>
