<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>DebugUtils</name>
  </assembly>
  <members>
    <member name="N:DebugUtils.Debugger">
    </member>
    <member name="T:DebugUtils.Debugger.DelegateHelper">
    </member>
    <member name="M:DebugUtils.Debugger.DelegateHelper.GetDelegateList(System.Delegate)">
      <param name="del">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DelegateHelper.GetMethodList(System.Delegate)">
      <param name="del">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DelegateHelper.GetMethodStringList(System.Delegate)">
      <param name="del">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DelegateHelper.GetMethodListSummary(System.Delegate)">
      <param name="del">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DelegateHelper.ContainsMethod(System.Delegate,System.String)">
      <param name="del">
</param>
      <param name="name">
</param>
    </member>
    <member name="T:DebugUtils.Debugger.DebugException">
      <summary>
Exception thrown when an assertion fails.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.DebugException.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.DebugException.#ctor(System.String)">
      <param name="message">
</param>
    </member>
    <member name="T:DebugUtils.Debugger.Debug">
      <summary>
The primary class that handless debugging. Most of the other classes are exposed as static members withing this class. All methods and fields are defined as "static". Provides support for serialization of the stored messages in XML and ZIP compressed XML format and generating of HTML reports.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.ClearMessageStore">
      <summary>
Remove all messages from the store.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.AddListner(DebugUtils.Debugger.IDebugListener)">
      <summary>
Attach a listener to the debugger.</summary>
      <returns>
true if the listener could be added;
false, otherwise.</returns>
      <param name="listener">
The listener to be added</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.RemoveListner(System.Int32)">
      <summary>
Detach a listener from the debugger.</summary>
      <param name="id">
The Id of the listener.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.RemoveAllListeners">
      <summary>
Detach all listeners attached to the debugger</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.GetListnerById(System.Int32)">
      <summary>
Returns a listener by it's Id.</summary>
      <returns>
A <typeparamref name="IDebugListener" /> object if the listener was found;
null, otherwise.</returns>
      <param name="id">
The Id of the listener.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.GetListnerByIndex(System.Int32)">
      <summary>
Returns an listener by knowing it's index.</summary>
      <returns>
A <typeparamref name="IDebugListener" /> object if the listener was found;
null, otherwise.</returns>
      <param name="index">
The index of the listener.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.AddFilter(DebugUtils.Debugger.IDebugMessageFilter)">
      <summary>
Attach a filter to the debugger.</summary>
      <returns>
true if the filter could be attached;
false, otherwise.</returns>
      <param name="filter">
The filter to be attached.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.RemoveFilter(System.Int32)">
      <summary>
Detach a filter from the debugger.</summary>
      <param name="filterId">
The Id of the filter.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.RemoveAllFilters">
      <summary>
Detach all filters from the debugger.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.GetFilterById(System.Int32)">
      <summary>
Returns a filter by knowing it's Id.</summary>
      <returns>
A <typeparamref name="IDebugMessageFilter" /> object if the filter was found;
null, otherwise.</returns>
      <param name="filterId">
The Id of the filter.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.GetFilterByIndex(System.Int32)">
      <summary>
Return a filter by knowing it's index.</summary>
      <returns>
A <typeparamref name="IDebugMessageFilter" /> object if the filter was found;
null, otherwise.</returns>
      <param name="index">
The Id of the index.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.Assert(System.Boolean)">
      <summary>
Performs an assertion.</summary>
      <remarks>
The assertion fails if the giben value is false.</remarks>
      <param name="value">
The value to test.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.Assert(System.Boolean,System.String,System.Object[])">
      <summary>
Performs an assertion.</summary>
      <remarks>
The assertion fails if the giben value is false.</remarks>
      <param name="value">
The value to test.</param>
      <param name="format">
</param>
      <param name="args">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.AssertType(System.Object,System.Type,System.String,System.Object[])">
      <summary>
Performs a type assertion.</summary>
      <param name="obj">
The object to check.</param>
      <param name="type">
The type to check for.</param>
      <param name="format">
The string used to format the message.</param>
      <param name="args">
The message parameters.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.AssertType(System.Object,System.Type)">
      <summary>
Performs a type assertion.</summary>
      <param name="obj">
The object to check.</param>
      <param name="type">
The type to check for.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.AssertNotNull(System.Object)">
      <summary>
Performs a null assertion.</summary>
      <param name="obj">
The object to check.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.AssertNotNull(System.Object,System.String,System.Object[])">
      <summary>
Performs a null assertion.</summary>
      <param name="obj">
The object to check.</param>
      <param name="format">
The string used to format the message.</param>
      <param name="args">
The message parameters.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.ReportError(System.String,System.Object[])">
      <summary>
Reports the given error to the debugger.</summary>
      <param name="format">
The string used to format the message.</param>
      <param name="args">
The message parameters.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.ReportWarning(System.String,System.Object[])">
      <summary>
Reports the given warning to the debugger.</summary>
      <param name="format">
The string used to format the message.</param>
      <param name="args">
The message parameters.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.Report(System.String,System.Object[])">
      <summary>
Reports the given message to the debugger.</summary>
      <param name="format">
The string used to format the message.</param>
      <param name="args">
The message parameters.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.SerializeMessages(System.String)">
      <summary>
Serializes all stored messages in XML format.</summary>
      <returns>
true if the messages were successfully serialized.
false if the message couldn't be serialized.</returns>
      <param name="path">
The path where to store the serialized message.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.DeserializeMessages(System.String)">
      <summary>
Deserializes all stored messages from XML format.</summary>
      <returns>
true if the messages were successfully deserialized.
false if the message couldn't be deserialized.</returns>
      <param name="path">
The path from where to deserialize the message.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.SerializeMessages(System.IO.MemoryStream)">
      <summary>
Serializes all stored messages in XML format.</summary>
      <returns>
true if the message was successfully serialized.
false if the message couldn't be serialized.</returns>
      <param name="memoryStream">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.SerializeMessagesCompressed(System.String)">
      <summary>
Serializes all stored messages in XML and compresses them in ZIP format</summary>
      <returns>
true if the message was successfully serialized.
false if the message couldn't be serialized.</returns>
      <param name="path">
The path where to store the serialized messages.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.LaunchDebugMessageViewer(System.String)">
      <summary>
Launch the attached debug message viewer</summary>
      <returns>
true if the viewer could be launched;
false, otherwise.</returns>
      <param name="path">
The File to open.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.LaunchDebugMessageViewer">
      <summary>
Launch the attached debug message viewer</summary>
      <remarks>
A temporary XML File will be generated containing the serialized messages.</remarks>
      <returns>
true if the viewer could be launched;
false, otherwise.</returns>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.GenerateHtmlReport(System.String,System.String,System.Boolean)">
      <summary>
Generate a report in HTML format about the stored debug messages</summary>
      <returns>
true if the report could be generated;
false, otherwise.</returns>
      <param name="path">
The location where to save the report.</param>
      <param name="title">
The title of the report.</param>
      <param name="open">
Specifies whether or not to open the report in the default browser.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.GenerateHtmlReport">
      <summary>
Generate a report in HTML format about the stored debug messages</summary>
      <remarks>
The report will be saved in the temporary directory and opened automatically in the default browser.</remarks>
      <returns>
true if the report could be generated;
false, otherwise.</returns>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.EnterContext(System.String)">
      <summary>
Enter a new message context.</summary>
      <param name="name">
The name of the new context.</param>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.ExitContext">
      <summary>
Return to the previous context.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Debug.IsCriticalException(System.Exception)">
      <summary>
Verifies if an exception is a critical one.</summary>
      <param name="ex">
The exception to verify.</param>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.Enabled">
      <summary>
Indicates whether or not the debugger is enabled or not.</summary>
      <remarks>
The debugger is enabled by default.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.StoredMessageCount">
      <summary>
The number of messages stored in the debugger store.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.DebugMessageViewerEnvironmentVariable">
      <summary>
Specifies the environmental variable used to locate the viewer application.</summary>
      <remarks>
The variable is used only if DebugMessageViewerPath is not set.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.FilterCount">
      <summary>
Returns the number of attached filters.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.BreakOnFailedAssertion">
      <summary>
Indicates whether or not the application should thrown an exception when an assertion fails.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.StoreMessages">
      <summary>
Indicates whether or not the messages should be stored.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.HasMessageViewerAttached">
      <summary>
Specifies whether or not a viewer application is set.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.MessageStoreCapacity">
      <summary>
The the capacity of the message store.</summary>
      <remarks>
If the maximum capacity is exceeded, messages from the beginning are removed.
If no capacity is set, the debugger uses the default capacity (1024).</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.DebugMessages">
      <summary>
Provides access to the list of debug messages.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.ListenerCount">
      <summary>
Returns the number of attached listeners.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.LogToDebugger">
      <summary>
Indicates whether or not to log the message to the debugger.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.SaveStackInfo">
      <summary>
Indicates whether or not stack information should be stored for each message.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.Debug.DebugMessageViewerPath">
      <summary>
Specifies the path of the message viewer application.</summary>
      <remarks>
The application is launched with a command-line parameter
(ex: C:\viewer.exe C:\messages.xml)</remarks>
    </member>
    <member name="T:DebugUtils.Debugger.StackSegment">
      <summary>
Stores information about an Method on the stack.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.StackSegment.DeclaringNamespace">
      <summary>
The namespace where the Method call is made.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.StackSegment.Type">
      <summary>
The type of the called Method.</summary>
      <remarks>
See <see cref="MethodType" /> for details.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.StackSegment.File">
      <summary>
The source File where the Method call made.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.StackSegment.DeclaringObject">
      <summary>
The object in which the Method call is made.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.StackSegment.Method">
      <summary>
The name of the called Method.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.StackSegment.Line">
      <summary>
The Line at which the Method is called.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.DebugMessage">
      <summary>
The primary structure used to store message information.</summary>
      <remarks>
Contains the message, information about the type of the
message, the time at which the message was generated and information
about the stack segments.</remarks>
    </member>
    <member name="M:DebugUtils.Debugger.DebugMessage.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.DebugMessage.#ctor(System.String)">
      <param name="message">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DebugMessage.#ctor(DebugUtils.Debugger.DebugMessageType,System.DateTime,System.String)">
      <param name="messageType">
</param>
      <param name="time">
</param>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.BaseMethod">
      <summary>
Information (the stack segment) for the method that generated this message.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.Time">
      <summary>
The time at which the message was generated.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.Type">
      <summary>
The type of the message.</summary>
      <remarks>
See <see cref="DebugMessageType" /> for details.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.HasStack">
      <summary>
Specifies if the message has information about the entire method stack.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.Context">
      <summary>
The context in which the message was created.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.StackSegments">
      <summary>
The list of all stack segments. Present only if HasStack is true.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessage.Message">
      <summary>
The message string.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.IDebugListener.Open">
      <summary>
Method called by the debugger the first time it uses the listener.</summary>
      <returns>
true if the listener could be opened;
otherwise, false.</returns>
    </member>
    <member name="M:DebugUtils.Debugger.IDebugListener.Close">
      <summary>
Method called by the debugger when the listener is no longer needed.</summary>
      <returns>
true if the listener could be closed;
otherwise, false.</returns>
    </member>
    <member name="M:DebugUtils.Debugger.IDebugListener.DumpMessage(DebugUtils.Debugger.DebugMessage)">
      <summary>
Method called by the debugger if a message needs to be handled by the listener.</summary>
      <returns>
true if the message could be handled;
otherwise, false.</returns>
      <param name="message">
A <typeparamref name="DebugMessage" /> object that represents the message to be handled.</param>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugListener.ListnerId">
      <summary>
Gets or sets the Id of the listener.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugListener.IsOpen">
      <summary>
Gets the open state of the listener.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugListener.Enabled">
      <summary>
Gets or sets the enabled state of the listener.</summary>
      <remarks>
If Enabled is set to false the debugger no longer calls
the DumpMessage method to notify the listener about new messages.</remarks>
    </member>
    <member name="M:DebugUtils.Debugger.IDebugMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <summary>
Called by the debugger when a message needs to be filtered.</summary>
      <returns>
true if the message is allowed by the filter;
otherwise, false.</returns>
      <param name="message">
A <typeparamref name="DebugMessage" /> object that represents the message to be filter.</param>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugMessageFilter.FilterId">
      <summary>
Gets or sets the Id of the filter;</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugMessageFilter.Enabled">
      <summary>
Gets or sets the enabled state of the filter.</summary>
      <remarks>
If Enabled is set to false the debugger no longer calls
the filter when filtering messages.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugMessageFilter.Implication">
      <summary>
The implication of the filter in relationship with other ones.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.IDebugMessageNotifier.Launch">
      <summary>
Called when the notifier needs to be launched.</summary>
      <returns>
true if the notifier could be launched;
otherwise, false.</returns>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugMessageNotifier.Message">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
    </member>
    <member name="P:DebugUtils.Debugger.IDebugMessageNotifier.Enabled">
      <summary>
Gets or sets the enabled state of the notifier.</summary>
      <remarks>
If Enabled is set to false the debugger no longer
launches the notifier.</remarks>
    </member>
    <member name="M:DebugUtils.Debugger.IObjectCounterNotifier.Launch">
      <summary>
Called when the notifier needs to be shown.</summary>
      <returns>
true if the notifier could be launched;
false, otherwise.</returns>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.Enabled">
      <summary>
Gets or sets the enabled state of the notifier.</summary>
      <remarks>
If Enabled is set to false the notifier is no longer launched.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.CounterEnabled">
      <summary>
Gets or sets the counter enabled state.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.CounterName">
      <summary>
Gets or sets the name of the counter.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.CounterMaximumCount">
      <summary>
Gets or sets the maximum allowed counter count.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.Counter">
      <summary>
Gets or sets the object counter.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.CounterCount">
      <summary>
Gets or sets the counter count.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IObjectCounterNotifier.CounterType">
      <summary>
Gets or sets the type of the counted object.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.ObjectCounter">
      <summary>
Provides functionality for counting objects.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.AddObjectType(System.Type,System.String,System.Int32)">
      <summary>
Add a object type.</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="categoryName">
</param>
      <param name="maxCount">
The maximum count of objects of this type allowed.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.AddObjectType(System.Type,System.String)">
      <summary>
Add a object type.</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="categoryName">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.AddObjectType(System.Type,System.Int32)">
      <summary>
Add a object type.</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="maxCount">
The maximum count of objects of this type allowed.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.AddObjectType(System.Type)">
      <summary>
Add a object type.</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.IncrementObjectCount(System.Object,System.String)">
      <summary>
Increment the count of the object</summary>
      <param name="obj">
</param>
      <param name="counterName">
The name of the counter this type belongs.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.IncrementObjectCount(System.Object)">
      <summary>
Increment the count of the object</summary>
      <param name="obj">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.DecrementObjectCount(System.Object,System.String)">
      <summary>
Decrement the count of the object</summary>
      <param name="obj">
</param>
      <param name="counterName">
The name of the counter this type belongs.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.DecrementObjectCount(System.Object)">
      <summary>
Decrement the count of the object</summary>
      <param name="obj">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GetObjectCount(System.Type,System.String)">
      <summary>
Get the object count</summary>
      <returns>
NULL if the specified type was not fount.</returns>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="counterName">
The name of the counter this type belongs.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GetObjectCount(System.Type)">
      <summary>
Get the object count</summary>
      <returns>
NULL if the specified type was not fount.</returns>
      <param name="type">
The object type. Use typeof() to get the type.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.ResetObjectCount(System.Type,System.String)">
      <summary>
Reset the object count</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="counterName">
The name of the counter this type belongs.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.ResetObjectCount(System.Type)">
      <summary>
Get the object count</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.SetObjectCounterState(System.Type,System.String,System.Boolean)">
      <summary>
Set the state of the object</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="counterName">
The name of the counter this type belongs.</param>
      <param name="state">
The state of the object.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.SetObjectCounterState(System.Type,System.Boolean)">
      <summary>
Set the state of the object</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="state">
The state of the object.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GetObjectCounterState(System.Type,System.String)">
      <summary>
Get the state of the object</summary>
      <returns>
NULL if the specified type was not found;
The state of the counter, otherwise.</returns>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="counterName">
The name of the counter this type belongs.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GetObjectCounterState(System.Type)">
      <summary>
Get the state of the object</summary>
      <returns>
NULL if the specified type was not found;
The state of the counter, otherwise.</returns>
      <param name="type">
The object type. Use typeof() to get the type.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.SetObjectMaximumCount(System.Type,System.String,System.Int32)">
      <summary>
Set the maximum allowed number of objects</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="categoryName">
</param>
      <param name="maxCount">
The maximum count of objects of this type allowed.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.SetObjectMaximumCount(System.Type,System.Int32)">
      <summary>
Set the maximum allowed number of objects</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="maxCount">
The maximum count of objects of this type allowed.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GetObjectMaximumCount(System.Type,System.String)">
      <summary>
Get the maximum allowed number of objects</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
      <param name="categoryName">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GetObjectMaximumCount(System.Type)">
      <summary>
Get the maximum allowed number of objects</summary>
      <param name="type">
The object type. Use typeof() to get the type.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GenerateSummary">
      <summary>
Generate a summary about all object counters.</summary>
      <returns>
The summary string.</returns>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.SaveSummary(System.String)">
      <summary>
Save a summary about all the object counter (text File)</summary>
      <returns>
true if the summary could be saved;
false, otherwise.</returns>
      <param name="path">
The location where to save the summary.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GenerateHtmlReport(System.String,System.String,System.Boolean)">
      <summary>
Generate a report in HTML format about the stored object counters</summary>
      <returns>
true of the report coud pe generated;
false, otherwise.</returns>
      <param name="path">
The location where to save the report.</param>
      <param name="title">
The title of the report.</param>
      <param name="open">
Specifies whether or not to open the report in the default browser.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounter.GenerateHtmlReport">
      <summary>
Generate a report in HTML format about the stored object counters</summary>
      <remarks>
The report will be saved in the temporary directory and opened automatically in the default browser.</remarks>
      <returns>
true of the report could be generated;
false, otherwise.</returns>
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounter.AutoResetCounter">
      <summary>
Specifies whether or not to automatically reset the counter after the maximum value is reached.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounter.ObjectCounters">
      <summary>
Gets the number of defined object counters.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.DebugListenerBase">
      <summary>
It is recommended to derive all debug listeners from this abstract class.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.DebugListenerBase.Open">
    </member>
    <member name="M:DebugUtils.Debugger.DebugListenerBase.Close">
    </member>
    <member name="M:DebugUtils.Debugger.DebugListenerBase.DumpMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DebugListenerBase.GetFileName(System.String)">
      <param name="path">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.DebugListenerBase.ExtractSimplifiedMethod(System.String)">
      <summary>
Extracts the method name from the method definition.</summary>
      <returns>
The method name.</returns>
      <param name="method">
The method definition.</param>
    </member>
    <member name="M:DebugUtils.Debugger.DebugListenerBase.GetMethodTypeString(DebugUtils.Debugger.MethodType)">
      <summary>
Gets the type of the method as a string.</summary>
      <returns>
The type string.</returns>
      <param name="type">
The method type.</param>
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.Enabled">
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.UseStackInfo">
      <summary>
Specifies whether or not to use the stack information from the messages.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.TruncateFile">
      <summary>
Specifies whether or not to truncate the source file path to the file name.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.SimplifyMethod">
      <summary>
Specifies whether or not to extract the name of the method.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.HandledMessages">
      <summary>
Gets or sets the number of handled messages.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.IsOpen">
    </member>
    <member name="P:DebugUtils.Debugger.DebugListenerBase.ListnerId">
    </member>
    <member name="T:DebugUtils.Debugger.DebugMessageFilterBase">
      <summary>
It is recommended to derive all debug listeners from this abstract class.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.DebugMessageFilterBase.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessageFilterBase.Enabled">
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessageFilterBase.Implication">
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessageFilterBase.FilterId">
    </member>
    <member name="T:DebugUtils.Debugger.DebugMessageNotifierBase">
      <summary>
It is recommended to derive all debug message notifiers from this abstract class.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.DebugMessageNotifierBase.Launch">
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessageNotifierBase.Enabled">
    </member>
    <member name="P:DebugUtils.Debugger.DebugMessageNotifierBase.Message">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
    </member>
    <member name="T:DebugUtils.Debugger.CrashNotifierBase">
      <summary>
It is recommended to derive all crash notifiers from this abstract class.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.CrashNotifierBase.Launch">
    </member>
    <member name="P:DebugUtils.Debugger.CrashNotifierBase.DumpFilePath">
    </member>
    <member name="P:DebugUtils.Debugger.CrashNotifierBase.DebugMessagesFilePath">
    </member>
    <member name="P:DebugUtils.Debugger.CrashNotifierBase.CrashDetails">
    </member>
    <member name="P:DebugUtils.Debugger.CrashNotifierBase.UnhandledException">
    </member>
    <member name="T:DebugUtils.Debugger.ObjectCounterNotifierBase">
      <summary>
It is recommended to derive all object counter notifiers from this abstract class.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.ObjectCounterNotifierBase.Launch">
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.CounterName">
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.CounterMaximumCount">
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.CounterType">
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.Enabled">
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.CounterCount">
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.Counter">
      <seealso cref="ObjectCounter">
ObjectCounter</seealso>
    </member>
    <member name="P:DebugUtils.Debugger.ObjectCounterNotifierBase.CounterEnabled">
    </member>
    <member name="N:DebugUtils.Debugger.Listeners">
    </member>
    <member name="T:DebugUtils.Debugger.Listeners.TextFileListener">
      <summary>
Listener that writes the messages to a File.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.TextFileListener.Open">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.TextFileListener.Close">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.TextFileListener.DumpMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.Listeners.TextFileListener.FilePath">
    </member>
    <member name="P:DebugUtils.Debugger.Listeners.TextFileListener.Enabled">
    </member>
    <member name="M:DebugUtils.Debugger.IPerformanceIterationNotifier.Launch">
      <summary>
Called when the notifier needs to be shown.</summary>
      <returns>
true if the notifier could be launched;
false, otherwise.</returns>
    </member>
    <member name="P:DebugUtils.Debugger.IPerformanceIterationNotifier.Enabled">
      <summary>
Gets or sets the enabled state of the notifier.</summary>
      <remarks>
If Enabled is set to false the notifier is no longer launched.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.IPerformanceIterationNotifier.Iteration">
      <summary>
The iteration the notifier should handle.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.IPerformanceIterationNotifier.Event">
      <summary>
The event the notifier should handle.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.PerformanceIteration">
      <summary>
Provides information about an iteration.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.HitsPerSecond">
      <summary>
Gets the number of hits per second.</summary>
      <value>
The number of hits per seconds, if HitCount &gt; 0;
NaN, otherwise.</value>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.HitCount">
      <summary>
Gets or sets the number of hits.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.StartWorkingSet">
      <summary>
Gets or sets the amount of available memory when the iteration was started.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.DeltaWorkingSet">
      <summary>
Gets the amount of memory used during the iteration.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.StartTime">
      <summary>
Gets or sets the time at which the iteration started.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.EndTime">
      <summary>
Gets or sets the time at which the iteration ended.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.Number">
      <summary>
Gets or sets the number of the iteration.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.Duration">
      <summary>
Gets the duration of the iteration.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceIteration.EndWorkingSet">
      <summary>
Gets or sets the amount of available memory when the iteration was stopped.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.PerformanceEvent">
      <summary>
Provides information about a performance event.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.#ctor(System.String)">
      <param name="name">
The name of the event.</param>
    </member>
    <member name="E:DebugUtils.Debugger.PerformanceEvent.OnMaximumTimeExceeded">
      <summary>
Event called when the maximum allowed execution time is exceeded.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.Start">
      <summary>
Start an iteration.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.Stop">
      <summary>
Stop the currently running iteration.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.Hit">
      <summary>
Increase the hit count of the running iteration.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.StartTimed(System.TimeSpan,DebugUtils.Debugger.TimeEllapsedDelegate)">
      <summary>
Start an iteration with an exact duration.</summary>
      <param name="duration">
The duration to monitor the hit count.</param>
      <param name="onTimeEllapsed">
The method to call when the specified time elapses.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.StartTimed(System.TimeSpan)">
      <summary>
Start an iteration with an exact duration.</summary>
      <param name="duration">
The duration to monitor the hit count.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.StopTimer">
      <summary>
Stop monitoring the active performance iteration.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceEvent.Wait">
      <summary>
Wait until the event is stopped</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.MaximumTime">
      <summary>
Gets or sets the the maximum allowed time a event can take.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.ReportTimeExceedingToDebugger">
      <summary>
Specifies whether or not the debugger should be informed when an event takes more than the maximum allowed time.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.Name">
      <summary>
Gets or sets the name of the event.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.Manager">
      <seealso cref="T:DebugUtils.Debugger.PerformanceManager">
PerformanceManager</seealso>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.AverageDuration">
      <summary>
The average of all iteration durations</summary>
      <value>
The average duration if IterationCount &gt; 0;
null, otherwise.</value>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.Iterations">
      <summary>
Gets the iterations.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.IsStarted">
      <summary>
Specifies whether or not the event is started.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceEvent.IterationCount">
      <summary>
Gets the number of iterations.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.PerformanceManager">
      <summary>
Provides functionality for monitoring the performance of the application.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.AddEvent(System.String,System.Boolean)">
      <summary>
Add a new performance event</summary>
      <returns>
The newly added event.</returns>
      <param name="name">
The name of the performance event.</param>
      <param name="start">
Specifies whether or not to start the event immediately.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.AddEvent(System.String)">
      <summary>
Add a new performance event</summary>
      <returns>
The newly added event.</returns>
      <param name="name">
The name of the performance event.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.GetEvent(System.String)">
      <summary>
Get the event by its name</summary>
      <param name="name">
The name of the performance event.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.RemoveEvent(System.String)">
      <summary>
Remove the event</summary>
      <param name="name">
The name of the performance event.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.StartEvent(System.String)">
      <summary>
Start the event.</summary>
      <param name="name">
The name of the performance event.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.StartTimedEvent(System.String,System.TimeSpan,DebugUtils.Debugger.TimeEllapsedDelegate)">
      <summary>
Start the event with a timer attached</summary>
      <param name="name">
The name of the performance event.</param>
      <param name="duration">
The time to monitor the hit count.</param>
      <param name="onTimeEllapsed">
The Method to call when the specified time elapses.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.StartTimedEvent(System.String,System.TimeSpan)">
      <summary>
Start the event with a timer attached</summary>
      <param name="name">
The name of the performance event.</param>
      <param name="duration">
The time to monitor the hit count.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.StopEvent(System.String)">
      <summary>
Stop the event.</summary>
      <returns>
The duration of the last iteration if the event was found;
TimeSpan.MaxValue, otherwise.</returns>
      <param name="name">
The name of the performance event.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.IncreaseHitCount(System.String)">
      <summary>
Increase the hit count of the running iteration for the given performance event</summary>
      <param name="name">
The name of the performance event.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.SerializeEvents(System.String)">
      <summary>
Serialize all _events</summary>
      <returns>
true if the _events could be serialized;
false, otherwise.</returns>
      <param name="path">
The path where to save the serialized _events.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.LaunchPerformanceViewer">
      <summary>
Launch the attached performance viewer</summary>
      <returns>
true if the viewer could be launched;
false, otherwise.</returns>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.GenerateHtmlSummary(System.String,System.String,System.Boolean)">
      <summary>
Generate a report in HTML format about the stored object counters</summary>
      <returns>
true if the report could be generated;
false, otherwise.</returns>
      <param name="path">
The location where to save the report.</param>
      <param name="title">
The title of the report.</param>
      <param name="open">
Specifies whether or not to open the report in the default browser.</param>
    </member>
    <member name="M:DebugUtils.Debugger.PerformanceManager.GenerateHtmlSummary">
      <summary>
Generate a report in HTML format about the stored object counters</summary>
      <remarks>
The report will be saved in the temporary directory and opened automatically in the default browser.</remarks>
      <returns>
true if the report could be generated;
false, otherwise.</returns>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceManager.Events">
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceManager.EventCount">
      <summary>
Gets the number of the _events.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceManager.PerformanceViewerEnvironmentVariable">
      <summary>
Gets or sets the environment variable used to locate the viewer application.</summary>
      <remarks>
The vatiable is used only if <paramref name="PerformanceViewerPath" /> is not set.</remarks>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceManager.IterationNotifier">
      <summary>
Gets or sets the notifier.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceManager.Item(System.String)">
      <seealso cref="PerformanceEvent">
PerformanceEvent</seealso>
      <param name="name">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.PerformanceManager.PerformanceViewerPath">
      <summary>
Gets or sets the path of the attached viewer path.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.WinSAT">
      <summary>
Provides functionality for querying WinSAT (Windows Experience Index) scores.</summary>
      <remarks>
Available only in Windows Vista. The class isn't based on the WinSAT API, instead it uses the files from the WinSAT store.</remarks>
    </member>
    <member name="M:DebugUtils.Debugger.WinSAT.LoadWinSAT">
      <summary>
Load the scores from the WinSAT (Windows Experience Index) store</summary>
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.IsAvailable">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.MemoryScore">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.CpuScore">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.ScoresLoaded">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.GraphicsScore">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.DiskScore">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.ComputerScore">
    </member>
    <member name="P:DebugUtils.Debugger.WinSAT.GamingGraphicsScore">
    </member>
    <member name="M:DebugUtils.Debugger.ICrashNotifier.Launch">
    </member>
    <member name="P:DebugUtils.Debugger.ICrashNotifier.DebugMessagesFilePath">
    </member>
    <member name="P:DebugUtils.Debugger.ICrashNotifier.CrashDetails">
    </member>
    <member name="P:DebugUtils.Debugger.ICrashNotifier.DumpFilePath">
    </member>
    <member name="P:DebugUtils.Debugger.ICrashNotifier.UnhandledException">
    </member>
    <member name="T:DebugUtils.Debugger.CustomDataEventArgs">
      <summary>
Used to pass custom data to the exception manager when when writing the dump report.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.ExceptionManager">
      <summary>
Provides functionality for managing unhandled exceptions.</summary>
    </member>
    <member name="E:DebugUtils.Debugger.ExceptionManager.OnUnhandledException">
      <summary>
Event raised when an unhandled exception occurs.</summary>
    </member>
    <member name="E:DebugUtils.Debugger.ExceptionManager.OnWriteDump">
      <summary>
Event raised when the dump report is being written. It can be used to write custom data to the report.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.ExceptionManager.AttachExceptionManager(System.AppDomain)">
      <summary>
Attach the exception manager to the UnhandledException event of the given AppDomain.</summary>
      <param name="domain">
The AppDomain to which to attach the exception manager.</param>
    </member>
    <member name="M:DebugUtils.Debugger.ExceptionManager.AttachExceptionManager">
      <summary>
Attach the exception manager to the UnhandledException event of the default AppDomain.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.ExceptionManager.DetachExceptionManager">
      <summary>
Detach the exception manager from the attached AppDomain.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.CrashReportMessage">
      <summary>
The message to be sent to the debugger when reporting the application crash.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.ReportCrash">
      <summary>
Indicates whether or not to report the application crash to the debugger.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.AppendWinSATScores">
      <summary>
Indicates whether or not to append the WinSAT (Windows Experience Index) scores to the dump report.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.SaveDebugMessages">
      <summary>
Indicates whether or not to save the debug messages when the application crashes.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.Dump">
      <summary>
Indicates whether or not to create a crash dump report.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.DebugMessagesPath">
      <summary>
The path where to save the debug messages.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.SaveMessagesCompressed">
      <summary>
Indicates whether or not to save the debug messages in compressed format (ZIP).</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.DumpHeader">
      <summary>
Indicates a description header of the crash dump report.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.ExceptionManager.DumpPath">
      <summary>
Indicates where to save the crash dump report.</summary>
    </member>
    <member name="T:DebugUtils.Debugger.Listeners.ConsoleListener">
      <summary>
Listener that writes the messages to the console.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.ConsoleListener.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.ConsoleListener.Open">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.ConsoleListener.Close">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.ConsoleListener.DumpMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.Listeners.ConsoleListener.Enabled">
    </member>
    <member name="N:DebugUtils.Debugger.Filters">
    </member>
    <member name="T:DebugUtils.Debugger.Filters.ErrorMessageFilter">
      <summary>
Filters messages of type error.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.ErrorMessageFilter.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.ErrorMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="T:DebugUtils.Debugger.Filters.WarningMessageFilter">
      <summary>
Filters messages of type warning.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.WarningMessageFilter.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.WarningMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="T:DebugUtils.Debugger.Filters.UnknownMessageFilter">
      <summary>
Filters messages of unknown type.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.UnknownMessageFilter.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.UnknownMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="T:DebugUtils.Debugger.Filters.NamespaceMessageFilter">
      <summary>
Filters messages by namespace.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.NamespaceMessageFilter.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.NamespaceMessageFilter.#ctor(System.Int32,System.String)">
      <param name="id">
</param>
      <param name="filterNamespace">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.NamespaceMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.Filters.NamespaceMessageFilter.Namespace">
    </member>
    <member name="T:DebugUtils.Debugger.Filters.ObjectMessageFilter">
      <summary>
Filters messages by object.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.ObjectMessageFilter.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.ObjectMessageFilter.#ctor(System.Int32,System.String)">
      <param name="id">
</param>
      <param name="filterObject">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.ObjectMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.Filters.ObjectMessageFilter.Object">
    </member>
    <member name="T:DebugUtils.Debugger.Filters.MethodMessageFilter">
      <summary>
Filters messages by Method.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.MethodMessageFilter.#ctor(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.MethodMessageFilter.#ctor(System.Int32,System.String)">
      <param name="id">
</param>
      <param name="filterMethod">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Filters.MethodMessageFilter.AllowMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.Filters.MethodMessageFilter.Method">
    </member>
    <member name="T:DebugUtils.Debugger.Listeners.WCFListener">
      <summary>
Listener that sends massages to a service using WCF.</summary>
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.WCFListener.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.WCFListener.#ctor(System.Int32,System.String)">
      <param name="listenerId">
</param>
      <param name="adress">
</param>
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.WCFListener.Open">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.WCFListener.Close">
    </member>
    <member name="M:DebugUtils.Debugger.Listeners.WCFListener.DumpMessage(DebugUtils.Debugger.DebugMessage)">
      <seealso cref="DebugMessage">
DebugMessage</seealso>
      <param name="message">
</param>
    </member>
    <member name="P:DebugUtils.Debugger.Listeners.WCFListener.Enabled">
    </member>
    <member name="P:DebugUtils.Debugger.Listeners.WCFListener.Adress">
    </member>
    <member name="T:DebugUtils.Debugger.StringTable">
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.#ctor">
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.AddString(System.String,System.String)">
      <summary>
Add a string to the string table</summary>
      <param name="key">
The key of the string.</param>
      <param name="value">
The string value.</param>
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.GetString(System.String)">
      <summary>
Retrieve the string value for the given key</summary>
      <remarks>
If the key was not found, the value will be retrieved from the associated ResourceManager.</remarks>
      <param name="key">
The key of the string.</param>
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.RemoveString(System.String)">
      <summary>
Remove a string from the string table</summary>
      <param name="key">
The key of the string.</param>
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.RemoveAllStrings">
      <summary>
Remove all string from the string table</summary>
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.SerializeTable(System.String)">
      <summary>
Serialize the string table in XML format</summary>
      <param name="path">
The location where to save the serialized string table.</param>
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.DeserializeTable(System.String)">
      <summary>
Deserialize the string table from XML format</summary>
      <param name="path">
The location from where to load the string table.</param>
    </member>
    <member name="M:DebugUtils.Debugger.StringTable.LoadFromResource(System.String)">
      <summary>
Loads all strings found in the resource</summary>
      <param name="path">
The path of the resource from where to load the data.</param>
    </member>
    <member name="P:DebugUtils.Debugger.StringTable.Item(System.String)">
      <param name="key">
</param>
    </member>
    <member name="T:DebugUtils.Debugger.DebugOptions">
      <summary>
Allows setting custom debug rules on objects and methods.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.SendToListners">
      <summary>
Specifies whether or not to send the messages to the listeners.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.SendToNotifier">
      <summary>
Specifies whether or not to send the messages to the notifier.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.Debug">
      <summary>
Specifies whether or not to handle the debugger calls.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.Assert">
      <summary>
Specifies whether or not to throw exceptions on failed assertions.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.SaveStack">
      <summary>
Specifies whether or not to save stack information for the messages.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.LogToDebugger">
      <summary>
Specifies whether or not to send the messages to the debugger.</summary>
    </member>
    <member name="P:DebugUtils.Debugger.DebugOptions.Store">
      <summary>
Specifies whether or not to store generated messages.</summary>
    </member>
  </members>
</doc>
